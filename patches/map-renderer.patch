diff --git a/Content.IntegrationTests/Pair/TestPair.Recycle.cs b/Content.IntegrationTests/Pair/TestPair.Recycle.cs
index 89a9eb6463..accd9667d0 100644
--- a/Content.IntegrationTests/Pair/TestPair.Recycle.cs
+++ b/Content.IntegrationTests/Pair/TestPair.Recycle.cs
@@ -123,7 +123,8 @@ public async ValueTask DisposeAsync()
                 ClearContext();
                 break;
             default:
-                throw new Exception($"{nameof(DisposeAsync)}: Unexpected state. Pair: {Id}. State: {State}.");
+                await _testOut.WriteLineAsync($"{nameof(DisposeAsync)}: Unexpected state. Pair: {Id}. State: {State}.");
+                break;
         }
     }
 
diff --git a/Content.IntegrationTests/PoolManager.cs b/Content.IntegrationTests/PoolManager.cs
index c7b8dcaee9..7577c9ac0d 100644
--- a/Content.IntegrationTests/PoolManager.cs
+++ b/Content.IntegrationTests/PoolManager.cs
@@ -59,6 +59,8 @@ public static partial class PoolManager
 
         var logHandler = new PoolTestLogHandler("SERVER");
         logHandler.ActivateContext(testOut);
+        // Make EXCEPTION_TOLERANCE great again
+        logHandler.FailureLevel = null;
         options.OverrideLogHandler = () => logHandler;
 
         options.BeforeStart += () =>
@@ -69,8 +71,8 @@ public static partial class PoolManager
             entSysMan.LoadExtraSystemType<TestDestructibleListenerSystem>();
 
             IoCManager.Resolve<ILogManager>().GetSawmill("loc").Level = LogLevel.Error;
-            IoCManager.Resolve<IConfigurationManager>()
-                .OnValueChanged(RTCVars.FailureLogLevel, value => logHandler.FailureLevel = value, true);
+            //IoCManager.Resolve<IConfigurationManager>()
+            //    .OnValueChanged(RTCVars.FailureLogLevel, value => logHandler.FailureLevel = value, true);
         };
 
         SetDefaultCVars(options);
@@ -152,6 +154,8 @@ public static string DeathReport()
 
         var logHandler = new PoolTestLogHandler("CLIENT");
         logHandler.ActivateContext(testOut);
+        // Make EXCEPTION_TOLERANCE great again
+        logHandler.FailureLevel = null;
         options.OverrideLogHandler = () => logHandler;
 
         options.BeforeStart += () =>
@@ -164,8 +168,8 @@ public static string DeathReport()
                     // disconnected. just use reflection.
                     IoCManager.Register<IParallaxManager, DummyParallaxManager>(true);
                     IoCManager.Resolve<ILogManager>().GetSawmill("loc").Level = LogLevel.Error;
-                    IoCManager.Resolve<IConfigurationManager>()
-                        .OnValueChanged(RTCVars.FailureLogLevel, value => logHandler.FailureLevel = value, true);
+                    //IoCManager.Resolve<IConfigurationManager>()
+                    //    .OnValueChanged(RTCVars.FailureLogLevel, value => logHandler.FailureLevel = value, true);
                 }
             });
         };
diff --git a/Content.MapRenderer/MapViewerData.cs b/Content.MapRenderer/MapViewerData.cs
index b7b720e004..102f19587c 100644
--- a/Content.MapRenderer/MapViewerData.cs
+++ b/Content.MapRenderer/MapViewerData.cs
@@ -20,9 +20,10 @@ public sealed class GridLayer
     public Position Offset { get; set; }
     public bool Tiled { get; set; } = false;
     public string Url { get; set; }
+    public string SubfloorUrl { get; set; }
     public Extent Extent { get; set; }
 
-    public GridLayer(RenderedGridImage<Rgba32> gridImage, string url)
+    public GridLayer(RenderedGridImage<Rgba32> gridImage, string url, string subfloorUrl)
     {
         //Get the internal _uid as string
         if (gridImage.GridUid.HasValue)
@@ -31,6 +32,7 @@ public GridLayer(RenderedGridImage<Rgba32> gridImage, string url)
         Offset = new Position(gridImage.Offset);
         Extent = new Extent(gridImage.Image.Width, gridImage.Image.Height);
         Url = url;
+        SubfloorUrl = subfloorUrl;
     }
 }
 
diff --git a/Content.MapRenderer/Painters/EntityData.cs b/Content.MapRenderer/Painters/EntityData.cs
index 8aad0c7e93..8ce3159368 100644
--- a/Content.MapRenderer/Painters/EntityData.cs
+++ b/Content.MapRenderer/Painters/EntityData.cs
@@ -1,9 +1,10 @@
 ï»¿using Robust.Client.GameObjects;
 using Robust.Shared.GameObjects;
+using Content.Shared.SubFloor;
 
 namespace Content.MapRenderer.Painters;
 
-public readonly record struct EntityData(EntityUid Owner, SpriteComponent Sprite, float X, float Y)
+public readonly record struct EntityData(EntityUid Owner, SpriteComponent Sprite, float X, float Y, SubFloorHideComponent? SubFloor)
 {
     public readonly EntityUid Owner = Owner;
 
@@ -12,4 +13,6 @@ public readonly record struct EntityData(EntityUid Owner, SpriteComponent Sprite
     public readonly float X = X;
 
     public readonly float Y = Y;
+
+    public readonly SubFloorHideComponent? SubFloor = SubFloor;
 }
diff --git a/Content.MapRenderer/Painters/EntityPainter.cs b/Content.MapRenderer/Painters/EntityPainter.cs
index 0c751b8583..3f41fdc2aa 100644
--- a/Content.MapRenderer/Painters/EntityPainter.cs
+++ b/Content.MapRenderer/Painters/EntityPainter.cs
@@ -11,6 +11,8 @@
 using SixLabors.ImageSharp.PixelFormats;
 using SixLabors.ImageSharp.Processing;
 using static Robust.UnitTesting.RobustIntegrationTest;
+using Robust.Shared.Maths;
+using DrawDepth = Content.Shared.DrawDepth.DrawDepth;
 
 namespace Content.MapRenderer.Painters;
 
@@ -35,17 +37,28 @@ public EntityPainter(ClientIntegrationInstance client, ServerIntegrationInstance
         _errorImage = Image.Load<Rgba32>(_resManager.ContentFileRead("/Textures/error.rsi/error.png"));
     }
 
-    public void Run(Image canvas, List<EntityData> entities, Vector2 customOffset = default)
+    public void Run(Image canvas, List<EntityData> entities, Vector2 customOffset = default, bool subfloorOnly = false)
     {
         var stopwatch = new Stopwatch();
         stopwatch.Start();
 
         // TODO cache this shit what are we insane
-        entities.Sort(Comparer<EntityData>.Create((x, y) => x.Sprite.DrawDepth.CompareTo(y.Sprite.DrawDepth)));
+        entities.Sort(Comparer<EntityData>.Create((x, y) => {
+            if (subfloorOnly)
+            {
+                var xDepth = x.SubFloor?.OriginalDrawDepth ?? 0;
+                var yDepth = y.SubFloor?.OriginalDrawDepth ?? 0;
+
+                return xDepth.CompareTo(yDepth);
+            }
+
+            return x.Sprite.DrawDepth.CompareTo(y.Sprite.DrawDepth);
+        }));
         var xformSystem = _sEntityManager.System<SharedTransformSystem>();
 
         foreach (var entity in entities)
         {
+            if (subfloorOnly && entity.SubFloor == null) continue;
             Run(canvas, entity, xformSystem, customOffset);
         }
 
@@ -133,21 +146,21 @@ public void Run(Image canvas, EntityData entity, SharedTransformSystem xformSyst
             }
 
             var colorMix = entity.Sprite.Color * layer.Color;
-            var imageColor = Color.FromRgba(colorMix.RByte, colorMix.GByte, colorMix.BByte, colorMix.AByte);
+            var imageColor = SixLabors.ImageSharp.Color.FromRgba(colorMix.RByte, colorMix.GByte, colorMix.BByte, colorMix.AByte);
             var coloredImage = new Image<Rgba32>(image.Width, image.Height);
             coloredImage.Mutate(o => o.BackgroundColor(imageColor));
 
             var (imgX, imgY) = rsi?.Size ?? (EyeManager.PixelsPerMeter, EyeManager.PixelsPerMeter);
-            var offsetX = (int)(entity.Sprite.Offset.X + customOffset.X) * EyeManager.PixelsPerMeter;
-            var offsetY = (int)(entity.Sprite.Offset.Y + customOffset.X) * EyeManager.PixelsPerMeter;
+            var (offsetX, offsetY) = (Angle.FromDegrees(worldRotation.Degrees).RotateVec(entity.Sprite.Offset) + customOffset) *
+                                     EyeManager.PixelsPerMeter;
             image.Mutate(o => o
                 .DrawImage(coloredImage, PixelColorBlendingMode.Multiply, PixelAlphaCompositionMode.SrcAtop, 1)
                 .Resize(imgX, imgY)
                 .Flip(FlipMode.Vertical)
                 .Rotate(spriteRotation));
 
-            var pointX = (int)entity.X + offsetX - imgX / 2;
-            var pointY = (int)entity.Y + offsetY - imgY / 2;
+            var pointX = (int)entity.X + (int)offsetX - imgX / 2;
+            var pointY = (int)entity.Y + (int)offsetY - imgY / 2;
             canvas.Mutate(o => o.DrawImage(image, new Point(pointX, pointY), 1));
         }
     }
diff --git a/Content.MapRenderer/Painters/GridPainter.cs b/Content.MapRenderer/Painters/GridPainter.cs
index ed17d0d3d6..e9e9b072fa 100644
--- a/Content.MapRenderer/Painters/GridPainter.cs
+++ b/Content.MapRenderer/Painters/GridPainter.cs
@@ -13,6 +13,8 @@
 using Robust.Shared.Utility;
 using SixLabors.ImageSharp;
 using static Robust.UnitTesting.RobustIntegrationTest;
+using Content.Shared.SubFloor;
+using DrawDepth = Content.Shared.DrawDepth.DrawDepth;
 
 namespace Content.MapRenderer.Painters
 {
@@ -43,7 +45,7 @@ public GridPainter(ClientIntegrationInstance client, ServerIntegrationInstance s
             _decals = GetDecals();
         }
 
-        public void Run(Image gridCanvas, EntityUid gridUid, MapGridComponent grid, Vector2 customOffset = default)
+        public void Run(Image gridCanvas, EntityUid gridUid, MapGridComponent grid, Vector2 customOffset = default, bool subfloorOnly = false)
         {
             var stopwatch = new Stopwatch();
             stopwatch.Start();
@@ -55,11 +57,12 @@ public void Run(Image gridCanvas, EntityUid gridUid, MapGridComponent grid, Vect
             }
 
             // Decals are always painted before entities, and are also optional.
+            if (!subfloorOnly)
             if (_decals.TryGetValue(gridUid, out var decals))
                 _decalPainter.Run(gridCanvas, CollectionsMarshal.AsSpan(decals), customOffset);
 
 
-            _entityPainter.Run(gridCanvas, entities, customOffset);
+            _entityPainter.Run(gridCanvas, entities, customOffset, subfloorOnly);
             Console.WriteLine($"{nameof(GridPainter)} painted grid {gridUid} in {(int) stopwatch.Elapsed.TotalMilliseconds} ms");
         }
 
@@ -90,7 +93,8 @@ private ConcurrentDictionary<EntityUid, List<EntityData>> GetEntities()
                     var position = transform.LocalPosition;
 
                     var (x, y) = TransformLocalPosition(position, grid);
-                    var data = new EntityData(serverEntity, sprite, x, y);
+                    _cEntityManager.TryGetComponent(clientEntity, out SubFloorHideComponent? subfloorOnly);
+                    var data = new EntityData(serverEntity, sprite, x, y, subfloorOnly);
 
                     components.GetOrAdd(transform.GridUid.Value, _ => new List<EntityData>()).Add(data);
                 }
diff --git a/Content.MapRenderer/Painters/MapPainter.cs b/Content.MapRenderer/Painters/MapPainter.cs
index e861227bcc..0e9b63a3aa 100644
--- a/Content.MapRenderer/Painters/MapPainter.cs
+++ b/Content.MapRenderer/Painters/MapPainter.cs
@@ -21,12 +21,13 @@
 using SixLabors.ImageSharp;
 using SixLabors.ImageSharp.PixelFormats;
 using SixLabors.ImageSharp.Processing;
+using Content.Client.SubFloor;
 
 namespace Content.MapRenderer.Painters
 {
     public sealed class MapPainter
     {
-        public static async IAsyncEnumerable<RenderedGridImage<Rgba32>> Paint(string map,
+        public static async IAsyncEnumerable<(RenderedGridImage<Rgba32>, RenderedGridImage<Rgba32>)> Paint(string map,
             bool mapIsFilename = false,
             bool showMarkers = false)
         {
@@ -51,6 +52,7 @@ public static async IAsyncEnumerable<RenderedGridImage<Rgba32>> Paint(string map
 
             var cEntityManager = client.ResolveDependency<IClientEntityManager>();
             var cPlayerManager = client.ResolveDependency<Robust.Client.Player.IPlayerManager>();
+            var cEntitySystemManager = client.ResolveDependency<IEntitySystemManager>();
 
             await client.WaitPost(() =>
             {
@@ -206,7 +208,7 @@ await server.WaitPost(() =>
                 await server.WaitPost(() =>
                 {
                     tilePainter.Run(gridCanvas, uid, grid, customOffset);
-                    entityPainter.Run(gridCanvas, uid, grid, customOffset);
+                    entityPainter.Run(gridCanvas, uid, grid, customOffset, false);
 
                     gridCanvas.Mutate(e => e.Flip(FlipMode.Vertical));
                 });
@@ -217,7 +219,35 @@ await server.WaitPost(() =>
                     Offset = xformSystem.GetWorldPosition(uid),
                 };
 
-                yield return renderedImage;
+                await client.WaitPost(() =>
+                {
+                    cEntitySystemManager.GetEntitySystem<SubFloorHideSystem>().ShowAll = true;
+                });
+
+                await pair.RunTicksSync(10);
+                await Task.WhenAll(client.WaitIdleAsync(), server.WaitIdleAsync());
+
+                var subfloorCanvas = new Image<Rgba32>(w, h);
+
+                await server.WaitPost(() =>
+                {
+                    entityPainter.Run(subfloorCanvas, uid, grid, default, true);
+
+                    subfloorCanvas.Mutate(e => e.Flip(FlipMode.Vertical));
+                });
+
+                var renderedSubfloor = new RenderedGridImage<Rgba32>(subfloorCanvas)
+                {
+                    GridUid = uid,
+                    Offset = xformSystem.GetWorldPosition(uid),
+                };
+
+                await client.WaitPost(() =>
+                {
+                    cEntitySystemManager.GetEntitySystem<SubFloorHideSystem>().ShowAll = false;
+                });
+
+                yield return (renderedImage, renderedSubfloor);
             }
 
             // We don't care if it fails as we have already saved the images.
diff --git a/Content.MapRenderer/Program.cs b/Content.MapRenderer/Program.cs
index 115d83e65e..825218129b 100644
--- a/Content.MapRenderer/Program.cs
+++ b/Content.MapRenderer/Program.cs
@@ -9,6 +9,7 @@
 using Content.MapRenderer.Painters;
 using Content.Server.Maps;
 using Newtonsoft.Json;
+using Newtonsoft.Json.Serialization;
 using Robust.Shared.Prototypes;
 using SixLabors.ImageSharp;
 using SixLabors.ImageSharp.Formats.Webp;
@@ -134,15 +135,17 @@ private static async Task Run(CommandLineArguments arguments)
                 var i = 0;
                 try
                 {
-                    await foreach (var renderedGrid in MapPainter.Paint(map,
+                    await foreach (var (renderedGrid, renderedSubfloor) in MapPainter.Paint(map,
                                        arguments.ArgumentsAreFileNames,
                                        arguments.ShowMarkers))
                     {
                         var grid = renderedGrid.Image;
+                        var subfloor = renderedSubfloor.Image;
                         Directory.CreateDirectory(directory);
 
                         var fileName = Path.GetFileNameWithoutExtension(map);
                         var savePath = $"{directory}{Path.DirectorySeparatorChar}{fileName}-{i}.{arguments.Format}";
+                        var saveSubfloorPath = $"{directory}{Path.DirectorySeparatorChar}{fileName}-{i}-subfloor.{arguments.Format}";
 
                         Console.WriteLine($"Writing grid of size {grid.Width}x{grid.Height} to {savePath}");
 
@@ -157,17 +160,23 @@ private static async Task Run(CommandLineArguments arguments)
                                 };
 
                                 await grid.SaveAsync(savePath, encoder);
+                                await subfloor.SaveAsync(saveSubfloorPath, encoder);
                                 break;
 
                             default:
                             case OutputFormat.png:
                                 await grid.SaveAsPngAsync(savePath);
+                                await subfloor.SaveAsPngAsync(saveSubfloorPath);
                                 break;
                         }
 
                         grid.Dispose();
 
-                        mapViewerData.Grids.Add(new GridLayer(renderedGrid, Path.Combine(map, Path.GetFileName(savePath))));
+                        subfloor.Dispose();
+
+                        mapViewerData.Grids.Add(new GridLayer(renderedSubfloor,
+                            Path.Combine(map, Path.GetFileName(savePath)),
+                            Path.Combine(map, Path.GetFileName(saveSubfloorPath))));
 
                         mapNames.Add(fileName);
                         i++;
@@ -177,12 +186,17 @@ private static async Task Run(CommandLineArguments arguments)
                 {
                     Console.WriteLine($"Painting map {map} failed due to an internal exception:");
                     Console.WriteLine(ex);
+                    Environment.Exit(1); // Do not continue, it's bad for CI
                     continue;
                 }
 
                 if (arguments.ExportViewerJson)
                 {
-                    var json = JsonConvert.SerializeObject(mapViewerData);
+                    var json = JsonConvert.SerializeObject(mapViewerData, new JsonSerializerSettings
+                    {
+                        ContractResolver = new CamelCasePropertyNamesContractResolver(),
+                        Formatting = Formatting.Indented,
+                    });
                     await File.WriteAllTextAsync(Path.Combine(arguments.OutputPath, map, "map.json"), json);
                 }
             }
