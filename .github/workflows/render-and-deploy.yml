name: Render and Deploy

on:
  push:
    branches:
      - master
  workflow_dispatch:
  schedule:
    - cron: "0 16 * * 6" # Every Saturday at 16:00 UTC

concurrency:
  group: render-build-deploy-${{ github.ref }}
  cancel-in-progress: true

env:
  MAP_IMAGES_CACHE_BUST_VERSION: v4
  MAP_RENDERER_CACHE_BUST_VERSION: v2
  SS14_REPO: space-sunrise/sunrise-station
  SS14_MAP_POOL: Resources/Prototypes/_Sunrise/Maps/Pools/default.yml

jobs:
  build-renderer:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Get SS14 SHA for caching
        id: submodule-sha
        run: echo "SS14_SHA=$(curl -s https://api.github.com/repos/${{ env.SS14_REPO }}/commits/master | jq -r '.sha')" >> $GITHUB_ENV

      - name: Cache renderer
        id: cache-renderer
        uses: actions/cache@v4
        with:
          key: build-renderer-${{ env.SS14_SHA }}-${{ env.MAP_RENDERER_CACHE_BUST_VERSION }}
          path: ss14/bin
          lookup-only: true # Skip download as the job doesn't need it

      - name: Checkout SS14 with all submodules
        if: ${{ steps.cache-renderer.outputs.cache-hit != 'true' }}
        uses: actions/checkout@v4
        with:
          repository: ${{ env.SS14_REPO }}
          path: ss14
          submodules: recursive

      - name: Set up .NET
        if: ${{ steps.cache-renderer.outputs.cache-hit != 'true' }}
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 9.0.x

      - name: Restore .NET dependencies
        if: ${{ steps.cache-renderer.outputs.cache-hit != 'true' }}
        run: dotnet restore ss14/Content.MapRenderer

      - name: Apply map renderer patch
        if: ${{ steps.cache-renderer.outputs.cache-hit != 'true' }}
        run: git -C ss14 apply ../patches/map-renderer.patch

      - name: Build map renderer
        if: ${{ steps.cache-renderer.outputs.cache-hit != 'true' }}
        run: dotnet build ss14/Content.MapRenderer --configuration Release --no-restore

  prepare-matrix:
    runs-on: ubuntu-latest
    outputs:
      maps: ${{ steps.parse-maps-pool.outputs.json }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Checkout SS14
        uses: actions/checkout@v4
        with:
          repository: ${{ env.SS14_REPO }}
          path: ss14
          submodules: false

      - name: Parse maps pool to JSON
        id: parse-maps-pool
        uses: mikefarah/yq@master
        with:
          cmd: |
            pool_file="ss14/${{ env.SS14_MAP_POOL }}"
            json=$(cat "$pool_file" | yq --output-format=json --indent=0 '.[0].maps | unique')
            echo "json=${json}" >> $GITHUB_OUTPUT

  render:
    runs-on: ubuntu-latest
    needs:
      - build-renderer
      - prepare-matrix

    strategy:
      matrix:
#        map: [SunriseBox]
        map: ${{ fromJSON(needs.prepare-matrix.outputs.maps) }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Get SS14 SHA for caching
        id: submodule-sha
        run: echo "SS14_SHA=$(curl -s https://api.github.com/repos/${{ env.SS14_REPO }}/commits/master | jq -r '.sha')" >> $GITHUB_ENV

      - name: Cache map images
        id: cache-images
        uses: actions/cache@v4
        with:
          key: map-${{ matrix.map }}-${{ env.SS14_SHA }}-${{ env.MAP_IMAGES_CACHE_BUST_VERSION }}
          path: ss14/Resources/MapImages

      - name: Checkout SS14 with submodules
        if: ${{ steps.cache-images.outputs.cache-hit != 'true' }}
        uses: actions/checkout@v4
        with:
          repository: ${{ env.SS14_REPO }}
          path: ss14
          submodules: true

      - name: Restore map renderer
        if: ${{ steps.cache-images.outputs.cache-hit != 'true' }}
        id: restore-map-renderer
        uses: actions/cache/restore@v4
        with:
          key: build-renderer-${{ env.SS14_SHA }}-${{ env.MAP_RENDERER_CACHE_BUST_VERSION }}
          path: ss14/bin
          fail-on-cache-miss: true

      - name: Set up .NET
        if: ${{ steps.cache-images.outputs.cache-hit != 'true' }}
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 9.0.x

      - name: Render map
        if: ${{ steps.cache-images.outputs.cache-hit != 'true' }}
        run: ss14/bin/Content.MapRenderer/Content.MapRenderer --viewer "${{ matrix.map }}"

      - name: Upload map images as artifact
        uses: actions/upload-artifact@v4
        with:
          name: map-${{ matrix.map }}
          path: ss14/Resources/MapImages

  build-viewer:
    runs-on: ubuntu-latest
    needs: render

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download map images
        uses: actions/download-artifact@v4
        with:
          path: public/maps
          pattern: map-*
          merge-multiple: true

      - name: List map images
        run: ls -R public/maps

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "22"

      - name: Install Node.js dependencies
        run: npm ci

      - name: Install libvips
        run: |
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends libvips-tools

      - name: Create map list
        run: npm run create-map-list

      - name: Cut map images into tiles
        run: npm run cut-into-tiles

      - name: Build map viewer
        run: npm run build

      - name: Upload map viewer files as artifact
        id: deployment
        uses: actions/upload-pages-artifact@v3
        with:
          path: dist

  deploy:
    runs-on: ubuntu-latest
    needs: build-viewer

    permissions:
      pages: write
      id-token: write

    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}

    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
